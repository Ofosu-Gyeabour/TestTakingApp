// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using PETAS.Models.Domain;

namespace PETAS.Data.Data
{
    public partial class PantrainerContext : DbContext
    {
        public PantrainerContext()
        {
        }

        public PantrainerContext(DbContextOptions<PantrainerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdmList> AdmLists { get; set; }
        public virtual DbSet<AssessmentQuestionPool> AssessmentQuestionPools { get; set; }
        public virtual DbSet<AssessmentSubject> AssessmentSubjects { get; set; }
        public virtual DbSet<AssignedTraining> AssignedTrainings { get; set; }
        public virtual DbSet<CertificationAwarder> CertificationAwarders { get; set; }
        public virtual DbSet<ObjectiveClass> ObjectiveClasses { get; set; }
        public virtual DbSet<Qalloted> Qalloteds { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<StaffQuestionAssessment> StaffQuestionAssessments { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TrainingAssessment> TrainingAssessments { get; set; }
        public virtual DbSet<TrainingCertification> TrainingCertifications { get; set; }
        public virtual DbSet<TrainingDomain> TrainingDomains { get; set; }
        public virtual DbSet<TrainingGrouping> TrainingGroupings { get; set; }
        public virtual DbSet<TrainingResource> TrainingResources { get; set; }
        public virtual DbSet<TrainingResourceType> TrainingResourceTypes { get; set; }
        public virtual DbSet<TrainingStatusType> TrainingStatusTypes { get; set; }
        public virtual DbSet<TrainingType> TrainingTypes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssessmentQuestionPool>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key of the table entity");

                entity.Property(e => e.Question).HasComment("a question for the assessment");

                entity.Property(e => e.QuestionType).HasComment("question type lookup. foreign key to the dbo.QuestionTypeLookup table");

                entity.Property(e => e.SubjectId).HasComment("foreign key to Training Assessment");

                entity.HasOne(d => d.QuestionTypeNavigation)
                    .WithMany(p => p.AssessmentQuestionPools)
                    .HasForeignKey(d => d.QuestionType)
                    .HasConstraintName("FK_AssessmentQuestions_QuestionTypeLookup");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.AssessmentQuestionPools)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK_AssessmentQuestionPool_AssessmentSubject");
            });

            modelBuilder.Entity<AssignedTraining>(entity =>
            {
                entity.Property(e => e.AssignedTrainingId).HasComment("the Id for the table entity");

                entity.Property(e => e.ApprovedBy).HasComment("the one doing the approval of the training");

                entity.Property(e => e.ApprovedDate).HasComment("the date of approval");

                entity.Property(e => e.AssignedBy).HasComment("the one doing the assignment");

                entity.Property(e => e.AssignedDate).HasComment("the assigned date");

                entity.Property(e => e.TrainingId).HasComment("the ID of the scheduled training");
            });

            modelBuilder.Entity<CertificationAwarder>(entity =>
            {
                entity.Property(e => e.Id).HasComment("the Id of the awarder");

                entity.Property(e => e.Awarder).HasComment("the name of the awarder");
            });

            modelBuilder.Entity<Qalloted>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key");

                entity.Property(e => e.Alloted).HasComment("the number of questions alloted");

                entity.Property(e => e.QuestionTypeId).HasComment("the type of questions. foreign key to the dbo.QuestionTypeLookup table entity");

                entity.Property(e => e.TrainingAssessmentId).HasComment("the particular assessment under the training programme");

                entity.Property(e => e.TrainingId).HasComment("Id of the training programme");

                entity.HasOne(d => d.QuestionType)
                    .WithMany(p => p.Qalloteds)
                    .HasForeignKey(d => d.QuestionTypeId)
                    .HasConstraintName("FK_QAlloted_QuestionTypeLookup");

                entity.HasOne(d => d.TrainingAssessment)
                    .WithMany(p => p.Qalloteds)
                    .HasForeignKey(d => d.TrainingAssessmentId)
                    .HasConstraintName("FK_QAlloted_TrainingAssessment");
            });

            modelBuilder.Entity<QuestionType>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key");

                entity.Property(e => e.QuestionType1).HasComment("the type of question. (MCANS = Multiple choice questions, WRTANS = written)");
            });

            modelBuilder.Entity<StaffQuestionAssessment>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key of the table");

                entity.Property(e => e.MarksAwarded).HasComment("the marks awarded");

                entity.Property(e => e.QuestionId).HasComment("the ID of the question");

                entity.Property(e => e.TrainingId).HasComment("the ID of the training");
            });

            modelBuilder.Entity<Training>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key");

                entity.Property(e => e.AuthorizedDate).HasComment("the name of the authorizer approving the training");

                entity.Property(e => e.CreatedBy).HasComment("the name of the inputter creating the training");

                entity.Property(e => e.CreatedDate).HasComment("the date the training was created");

                entity.Property(e => e.DateFrom).HasComment("effective training date");

                entity.Property(e => e.DateTo).HasComment("effective training end date");

                entity.Property(e => e.MarkToPass).HasComment("Pass mark for the training. Training may consists of several assessments. In that case, it is the sum of all the marks gotten from each assessment");

                entity.Property(e => e.TrainingCertificationId).HasComment("certification to be rewarded after training. foreign key to dbo.TrainingCertification");

                entity.Property(e => e.TrainingGroupId).HasComment("the group of staff/human resource for which the training was designed");

                entity.Property(e => e.TrainingName).HasComment("the name of the training");

                entity.Property(e => e.TrainingStatusId).HasComment("the status of the training programme. foreign key to dbo.TrainingStatusLookup");

                entity.Property(e => e.TrainingType).HasComment("foreign key to dbo.TrainingType");

                entity.HasOne(d => d.TrainingCertification)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.TrainingCertificationId)
                    .HasConstraintName("FK_Training_TrainingCertification");

                entity.HasOne(d => d.TrainingGroup)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.TrainingGroupId)
                    .HasConstraintName("FK_Training_TrainingGrouping");

                entity.HasOne(d => d.TrainingStatus)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.TrainingStatusId)
                    .HasConstraintName("FK_Training_TrainingStatusType");

                entity.HasOne(d => d.TrainingTypeNavigation)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.TrainingType)
                    .HasConstraintName("FK_Training_TrainingTypeLookup");
            });

            modelBuilder.Entity<TrainingAssessment>(entity =>
            {
                entity.Property(e => e.AllotedAssessmentMarks).HasComment("the marks alloted for the assessment. This mark MAY be a part, or ALL the marks for the training. If training consist of one assessment, alloted_assessment_marks = dbo.Training.mark_to_pass");

                entity.Property(e => e.AllotedProratedMark).HasComment("in case the training comprises more than ONE assessment, this is the mark derived for this assessment in respect of the overall training");

                entity.Property(e => e.AssessmentName).HasComment("the name of the assessment programme");

                entity.Property(e => e.CreatedBy).HasComment("the user creating the assessment");

                entity.Property(e => e.CreatedDate).HasComment("the date the assessment was created");

                entity.Property(e => e.PassAssessmentMark)
                    .IsFixedLength()
                    .HasComment("the pass mark for the assessment");

                entity.Property(e => e.TrainingId).HasComment("the Id of the training programme");

                entity.HasOne(d => d.Training)
                    .WithMany(p => p.TrainingAssessments)
                    .HasForeignKey(d => d.TrainingId)
                    .HasConstraintName("FK_TrainingAssessment_Training");
            });

            modelBuilder.Entity<TrainingCertification>(entity =>
            {
                entity.Property(e => e.CertificationAwardedId).HasComment("the Id of the institution AWARDING the certificate");

                entity.Property(e => e.CertificationName).HasComment("the name of the certification");

                entity.Property(e => e.CertifiedYear).HasComment("year of certification");

                entity.HasOne(d => d.CertificationAwarded)
                    .WithMany(p => p.TrainingCertifications)
                    .HasForeignKey(d => d.CertificationAwardedId)
                    .HasConstraintName("FK_TrainingCertification_CertificationAwarder");
            });

            modelBuilder.Entity<TrainingDomain>(entity =>
            {
                entity.Property(e => e.DomainDescription).HasComment("the description of the domain");

                entity.Property(e => e.DomainName).HasComment("the name of the domain");
            });

            modelBuilder.Entity<TrainingGrouping>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key");

                entity.Property(e => e.CreatedById).HasComment("the user creating the group");

                entity.Property(e => e.CreatedDate).HasComment("the date group was created");

                entity.Property(e => e.GroupDescription).HasComment("description of the group");

                entity.Property(e => e.GroupName).HasComment("name of group");

                entity.HasOne(d => d.Domain)
                    .WithMany(p => p.TrainingGroupings)
                    .HasForeignKey(d => d.DomainId)
                    .HasConstraintName("FK_TrainingGrouping_TrainingDomain");
            });

            modelBuilder.Entity<TrainingResource>(entity =>
            {
                entity.Property(e => e.EmbeddedResource).HasComment("holds the resource if it happens to be embedded");

                entity.Property(e => e.IsEmbedded).HasComment("flag determining if the resource is embedded in the database or not");

                entity.Property(e => e.ResourceName).HasComment("the name of the resource material ");

                entity.Property(e => e.ResourcePath).HasComment("the path to the resource if not embedded");

                entity.Property(e => e.TrainingId).HasComment("Id of the training being referenced");

                entity.Property(e => e.TrainingResourceId).HasComment("the foreign key depicting the type of resource it is. (could be a PDF material, audio or video)");

                entity.HasOne(d => d.Training)
                    .WithMany(p => p.TrainingResources)
                    .HasForeignKey(d => d.TrainingId)
                    .HasConstraintName("FK_TrainingResource_Training");

                entity.HasOne(d => d.TrainingResourceNavigation)
                    .WithMany(p => p.TrainingResources)
                    .HasForeignKey(d => d.TrainingResourceId)
                    .HasConstraintName("FK_TrainingResource_TrainingResourceLookup");
            });

            modelBuilder.Entity<TrainingResourceType>(entity =>
            {
                entity.Property(e => e.Id).HasComment("primary key to the trainingResource table entity");

                entity.Property(e => e.CreatedDate).HasComment("the date the resource type was created");

                entity.Property(e => e.TrainingResourceExt)
                    .IsFixedLength()
                    .HasComment("the extension of the training resource to watch before taking tests");

                entity.Property(e => e.TrainingResourceType1).HasComment("the type of resource (audio/mp3, video/mp4, text or document/pdf)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}