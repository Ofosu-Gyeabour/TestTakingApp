// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
//using SecureAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using PETAS.Models.Domain.SecureAccess;
using System.Data.SqlClient;

namespace SecureAccess.Models
{
    public partial class SecureaccessContext
    {
        private SecureaccessContextProcedures _procedures;

        public virtual SecureaccessContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SecureaccessContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public SecureaccessContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class SecureaccessContextProcedures
    {
        private readonly SecureaccessContext _context;

        public SecureaccessContextProcedures(SecureaccessContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Proc_AR_Application_SelectApplicationPartsResult>> Proc_AR_Application_SelectApplicationPartsAsync(int? applicationObjectID, bool? returnNestedParts, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "applicationObjectID",
                    Value = applicationObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "returnNestedParts",
                    Value = returnNestedParts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Application_SelectApplicationPartsResult>("EXEC @returnValue = [dbo].[Proc_AR_Application_SelectApplicationParts] @applicationObjectID, @returnNestedParts", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public Task Proc_AR_AuthenticateAsync(string userName, string encryptedPassword, int value)
        {
            throw new NotImplementedException();
        }

        public virtual async Task<List<Proc_AR_Application_SelectApplicationProtectedAreasResult>> Proc_AR_Application_SelectApplicationProtectedAreasAsync(int? applicationObjectID, bool? returnNestedAreas, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "applicationObjectID",
                    Value = applicationObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "returnNestedAreas",
                    Value = returnNestedAreas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Application_SelectApplicationProtectedAreasResult>("EXEC @returnValue = [dbo].[Proc_AR_Application_SelectApplicationProtectedAreas] @applicationObjectID, @returnNestedAreas", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Application_SelectRolesResult>> Proc_AR_Application_SelectRolesAsync(int? ApplicationObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationObjectID",
                    Value = ApplicationObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Application_SelectRolesResult>("EXEC @returnValue = [dbo].[Proc_AR_Application_SelectRoles] @ApplicationObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_ApplicationPart_SelectApplicationPartsResult>> Proc_AR_ApplicationPart_SelectApplicationPartsAsync(int? parentObjectID, bool? returnNestedParts, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parentObjectID",
                    Value = parentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "returnNestedParts",
                    Value = returnNestedParts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_ApplicationPart_SelectApplicationPartsResult>("EXEC @returnValue = [dbo].[Proc_AR_ApplicationPart_SelectApplicationParts] @parentObjectID, @returnNestedParts", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_AuthenticateAsync(string Login, string Password, OutputParameter<int?> Res, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRes = new SqlParameter
            {
                ParameterName = "Res",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Res?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Login",
                    Size = 510,
                    Value = Login ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 2000,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterRes,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Authenticate] @Login, @Password, @Res OUTPUT", sqlParameters, cancellationToken);

            Res.SetValue(parameterRes.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_GetCatalogVersionAsync(OutputParameter<int?> ApplicationType, OutputParameter<string> Version, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterApplicationType = new SqlParameter
            {
                ParameterName = "ApplicationType",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ApplicationType?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterVersion = new SqlParameter
            {
                ParameterName = "Version",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Version?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterApplicationType,
                parameterVersion,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_GetCatalogVersion] @ApplicationType OUTPUT, @Version OUTPUT", sqlParameters, cancellationToken);

            ApplicationType.SetValue(parameterApplicationType.Value);
            Version.SetValue(parameterVersion.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_IsAuthorizedResult>> Proc_AR_IsAuthorizedAsync(int? OperatorID, int? ResourceID, int? RelationshipTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OperatorID",
                    Value = OperatorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ResourceID",
                    Value = ResourceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_IsAuthorizedResult>("EXEC @returnValue = [dbo].[Proc_AR_IsAuthorized] @OperatorID, @ResourceID, @RelationshipTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_LiveSession_ClearAsync(string MachineName, string ApplicationName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 100,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 200,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_Clear] @MachineName, @ApplicationName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_LiveSession_DeleteAsync(int? ObjectID, string HostName, string MachineName, string ApplicationName, string SessionID, DateTime? ValidFrom, DateTime? ValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HostName",
                    Size = 200,
                    Value = HostName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 100,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 200,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 100,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidFrom",
                    Value = ValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValidTo",
                    Value = ValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_Delete] @ObjectID, @HostName, @MachineName, @ApplicationName, @SessionID, @ValidFrom, @ValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_LiveSession_DeleteSpecificResult>> Proc_AR_LiveSession_DeleteSpecificAsync(string Condition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Condition",
                    Size = 800,
                    Value = Condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_LiveSession_DeleteSpecificResult>("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_DeleteSpecific] @Condition", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_LiveSession_InsertAsync(int? ObjectID, string HostName, string MachineName, string ApplicationName, string SessionID, DateTime? ValidFrom, DateTime? ValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HostName",
                    Size = 200,
                    Value = HostName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 100,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 200,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 100,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidFrom",
                    Value = ValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValidTo",
                    Value = ValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_Insert] @ObjectID, @HostName, @MachineName, @ApplicationName, @SessionID, @ValidFrom, @ValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_LiveSession_SelectResult>> Proc_AR_LiveSession_SelectAsync(int? ObjectID, string HostName, string MachineName, string ApplicationName, string SessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HostName",
                    Size = 200,
                    Value = HostName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 100,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 200,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 100,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_LiveSession_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_Select] @ObjectID, @HostName, @MachineName, @ApplicationName, @SessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_LiveSession_UpdateAsync(int? ObjectID, string HostName, string MachineName, string ApplicationName, string SessionID, DateTime? ValidFrom, DateTime? ValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HostName",
                    Size = 200,
                    Value = HostName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 100,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 200,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 100,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidFrom",
                    Value = ValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValidTo",
                    Value = ValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_LiveSession_Update] @ObjectID, @HostName, @MachineName, @ApplicationName, @SessionID, @ValidFrom, @ValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Log_DeleteAsync(int? LogID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LogID",
                    Value = LogID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Log_Delete] @LogID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Log_Delete_AllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Log_Delete_All]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Log_InsertResult>> Proc_AR_Log_InsertAsync(DateTime? LogTime, int? ByObjectID, int? ToObjectID, string LogText, string EventCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LogTime",
                    Value = LogTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ByObjectID",
                    Value = ByObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToObjectID",
                    Value = ToObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LogText",
                    Size = 7000,
                    Value = LogText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventCode",
                    Size = 200,
                    Value = EventCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Log_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_Log_Insert] @LogTime, @ByObjectID, @ToObjectID, @LogText, @EventCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Log_SelectResult>> Proc_AR_Log_SelectAsync(int? LogID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LogID",
                    Value = LogID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Log_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_Log_Select] @LogID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Log_UpdateAsync(int? LogID, DateTime? LogTime, int? ByObjectID, int? ToObjectID, string LogText, string EventCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LogID",
                    Value = LogID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LogTime",
                    Value = LogTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ByObjectID",
                    Value = ByObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToObjectID",
                    Value = ToObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LogText",
                    Size = 7000,
                    Value = LogText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventCode",
                    Size = 200,
                    Value = EventCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Log_Update] @LogID, @LogTime, @ByObjectID, @ToObjectID, @LogText, @EventCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_DeleteResult>> Proc_AR_Object_DeleteAsync(int? Old_ObjectID, int? New_ObjectID, int? NotRecursive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Old_ObjectID",
                    Value = Old_ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "New_ObjectID",
                    Value = New_ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotRecursive",
                    Value = NotRecursive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_DeleteResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_Delete] @Old_ObjectID, @New_ObjectID, @NotRecursive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Object_Delete_TransitionsAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Object_Delete_Transitions] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_GetPropertiesResult>> Proc_AR_Object_GetPropertiesAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_GetPropertiesResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_GetProperties] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_InsertResult>> Proc_AR_Object_InsertAsync(string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_Insert] @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectResult>> Proc_AR_Object_SelectAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_Select] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectApplicationPartsResult>> Proc_AR_Object_SelectApplicationPartsAsync(int? ParentObjectID, int? TopRowsNumber, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TopRowsNumber",
                    Value = TopRowsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectApplicationPartsResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectApplicationParts] @ParentObjectID, @TopRowsNumber, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectApplicationProtectedAreasResult>> Proc_AR_Object_SelectApplicationProtectedAreasAsync(int? ParentObjectID, int? TopRowsNumber, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TopRowsNumber",
                    Value = TopRowsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectApplicationProtectedAreasResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectApplicationProtectedAreas] @ParentObjectID, @TopRowsNumber, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectApplicationsResult>> Proc_AR_Object_SelectApplicationsAsync(int? TopRowsNumber, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopRowsNumber",
                    Value = TopRowsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectApplicationsResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectApplications] @TopRowsNumber, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectByPropertyValueResult>> Proc_AR_Object_SelectByPropertyValueAsync(string PropertyAlias, string ObjectTypeNamespace, string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PropertyAlias",
                    Size = 510,
                    Value = PropertyAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeNamespace",
                    Size = 510,
                    Value = ObjectTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 7000,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectByPropertyValueResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectByPropertyValue] @PropertyAlias, @ObjectTypeNamespace, @Value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectChildOrgUnitsResult>> Proc_AR_Object_SelectChildOrgUnitsAsync(int? ParentOrgUnitID, int? TopRowsNumber, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentOrgUnitID",
                    Value = ParentOrgUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TopRowsNumber",
                    Value = TopRowsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectChildOrgUnitsResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectChildOrgUnits] @ParentOrgUnitID, @TopRowsNumber, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectCountByObjectTypeResult>> Proc_AR_Object_SelectCountByObjectTypeAsync(string ObjectTypeNamespace, string ObjectTypeAlias, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectTypeNamespace",
                    Size = 510,
                    Value = ObjectTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeAlias",
                    Size = 510,
                    Value = ObjectTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectCountByObjectTypeResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectCountByObjectType] @ObjectTypeNamespace, @ObjectTypeAlias", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectEffectivePermissionMatrixResult>> Proc_AR_Object_SelectEffectivePermissionMatrixAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectEffectivePermissionMatrixResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectEffectivePermissionMatrix] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectEffectivePermissionsResult>> Proc_AR_Object_SelectEffectivePermissionsAsync(int? ObjectID, string ApplicationAlias, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationAlias",
                    Size = 510,
                    Value = ApplicationAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectEffectivePermissionsResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectEffectivePermissions] @ObjectID, @ApplicationAlias", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectEffectiveRolesResult>> Proc_AR_Object_SelectEffectiveRolesAsync(int? ObjectID, string ApplicationAlias, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationAlias",
                    Size = 510,
                    Value = ApplicationAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectEffectiveRolesResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectEffectiveRoles] @ObjectID, @ApplicationAlias", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectEffectiveRolesMatrixResult>> Proc_AR_Object_SelectEffectiveRolesMatrixAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectEffectiveRolesMatrixResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectEffectiveRolesMatrix] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectNestingApplicationPartsResult>> Proc_AR_Object_SelectNestingApplicationPartsAsync(string ParentObjectAlias, int? TopRowsNumber, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectAlias",
                    Size = 510,
                    Value = ParentObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TopRowsNumber",
                    Value = TopRowsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectNestingApplicationPartsResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectNestingApplicationParts] @ParentObjectAlias, @TopRowsNumber, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_SelectPermissionMatrixResult>> Proc_AR_Object_SelectPermissionMatrixAsync(int? ParentObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_SelectPermissionMatrixResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_SelectPermissionMatrix] @ParentObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Object_UpdateAsync(int? ObjectID, string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Object_Update] @ObjectID, @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Object_Valid_SelectResult>> Proc_AR_Object_Valid_SelectAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Object_Valid_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_Object_Valid_Select] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_ObjectType_DeleteResult>> Proc_AR_ObjectType_DeleteAsync(int? Old_ObjectTypeID, int? New_ObjectTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Old_ObjectTypeID",
                    Value = Old_ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "New_ObjectTypeID",
                    Value = New_ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_ObjectType_DeleteResult>("EXEC @returnValue = [dbo].[Proc_AR_ObjectType_Delete] @Old_ObjectTypeID, @New_ObjectTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_ObjectType_InsertResult>> Proc_AR_ObjectType_InsertAsync(string ObjectTypeName, string ObjectTypeAlias, string ObjectTypeNamespace, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectTypeName",
                    Size = 510,
                    Value = ObjectTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeAlias",
                    Size = 510,
                    Value = ObjectTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeNamespace",
                    Size = 510,
                    Value = ObjectTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_ObjectType_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_ObjectType_Insert] @ObjectTypeName, @ObjectTypeAlias, @ObjectTypeNamespace", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_ObjectType_SelectResult>> Proc_AR_ObjectType_SelectAsync(int? ObjectTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_ObjectType_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_ObjectType_Select] @ObjectTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_ObjectType_UpdateAsync(int? ObjectTypeID, string ObjectTypeName, string ObjectTypeAlias, string ObjectTypeNamespace, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeName",
                    Size = 510,
                    Value = ObjectTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeAlias",
                    Size = 510,
                    Value = ObjectTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeNamespace",
                    Size = 510,
                    Value = ObjectTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_ObjectType_Update] @ObjectTypeID, @ObjectTypeName, @ObjectTypeAlias, @ObjectTypeNamespace", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_ObjectUser_SearchResult>> Proc_AR_ObjectUser_SearchAsync(string Substring, string ObjectTypeNamespace, int? TopN, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Substring",
                    Size = 510,
                    Value = Substring ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeNamespace",
                    Size = 510,
                    Value = ObjectTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TopN",
                    Value = TopN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_ObjectUser_SearchResult>("EXEC @returnValue = [dbo].[Proc_AR_ObjectUser_Search] @Substring, @ObjectTypeNamespace, @TopN, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_PropertyValue_DeleteAsync(int? ObjectID, int? PropertyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyID",
                    Value = PropertyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_PropertyValue_Delete] @ObjectID, @PropertyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_PropertyValue_InsertResult>> Proc_AR_PropertyValue_InsertAsync(int? ObjectID, int? PropertyID, string PropertyValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyID",
                    Value = PropertyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyValue",
                    Size = 7000,
                    Value = PropertyValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_PropertyValue_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_PropertyValue_Insert] @ObjectID, @PropertyID, @PropertyValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_PropertyValue_SelectResult>> Proc_AR_PropertyValue_SelectAsync(int? ObjectID, int? PropertyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyID",
                    Value = PropertyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_PropertyValue_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_PropertyValue_Select] @ObjectID, @PropertyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_PropertyValue_UpdateAsync(int? ObjectID, int? PropertyID, string PropertyValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyID",
                    Value = PropertyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyValue",
                    Size = 7000,
                    Value = PropertyValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_PropertyValue_Update] @ObjectID, @PropertyID, @PropertyValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_RecountEveryMembershipAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_RecountEveryMembershipAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_RecountObjectMembershipAllAsync(int? PObjectID, int? CHObjectID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PObjectID",
                    Value = PObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CHObjectID",
                    Value = CHObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_RecountObjectMembershipAll] @PObjectID, @CHObjectID, @ObjectValidFrom, @ObjectValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_RecountOneRelationshipAsync(int? relationshipID, DateTime? ValidFrom, DateTime? ValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "relationshipID",
                    Value = relationshipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValidFrom",
                    Value = ValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValidTo",
                    Value = ValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_RecountOneRelationship] @relationshipID, @ValidFrom, @ValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Relationship_DeleteAsync(int? RelationshipID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipID",
                    Value = RelationshipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Relationship_Delete] @RelationshipID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Relationship_GetReflexiveRelationshipsResult>> Proc_AR_Relationship_GetReflexiveRelationshipsAsync(int? ParentObjectID, int? ChildObjectID, int? RelationshipTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Relationship_GetReflexiveRelationshipsResult>("EXEC @returnValue = [dbo].[Proc_AR_Relationship_GetReflexiveRelationships] @ParentObjectID, @ChildObjectID, @RelationshipTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Relationship_InsertResult>> Proc_AR_Relationship_InsertAsync(int? RelationshipTypeID, int? ParentObjectID, int? ChildObjectID, bool? DenyAccess, DateTime? RelationshipValidFrom, DateTime? RelationshipValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DenyAccess",
                    Value = DenyAccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidFrom",
                    Value = RelationshipValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidTo",
                    Value = RelationshipValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Relationship_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_Relationship_Insert] @RelationshipTypeID, @ParentObjectID, @ChildObjectID, @DenyAccess, @RelationshipValidFrom, @RelationshipValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_Relationship_InsertIntoRelationshipAllAsync(int? ParentObjectID, int? ChildObjectID, DateTime? RelationshipValidFrom, DateTime? RelationshipValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidFrom",
                    Value = RelationshipValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidTo",
                    Value = RelationshipValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_Relationship_InsertIntoRelationshipAll] @ParentObjectID, @ChildObjectID, @RelationshipValidFrom, @RelationshipValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Relationship_SelectResult>> Proc_AR_Relationship_SelectAsync(int? RelationshipID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipID",
                    Value = RelationshipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Relationship_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_Relationship_Select] @RelationshipID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Relationship_UpdateResult>> Proc_AR_Relationship_UpdateAsync(int? RelationshipID, int? RelationshipTypeID, int? ParentObjectID, int? ChildObjectID, bool? DenyAccess, DateTime? RelationshipValidFrom, DateTime? RelationshipValidTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipID",
                    Value = RelationshipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DenyAccess",
                    Value = DenyAccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidFrom",
                    Value = RelationshipValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipValidTo",
                    Value = RelationshipValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Relationship_UpdateResult>("EXEC @returnValue = [dbo].[Proc_AR_Relationship_Update] @RelationshipID, @RelationshipTypeID, @ParentObjectID, @ChildObjectID, @DenyAccess, @RelationshipValidFrom, @RelationshipValidTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_Relationship_Valid_SelectResult>> Proc_AR_Relationship_Valid_SelectAsync(int? RelationshipID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipID",
                    Value = RelationshipID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_Relationship_Valid_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_Relationship_Valid_Select] @RelationshipID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipAll_SelectResult>> Proc_AR_RelationshipAll_SelectAsync(int? ParentObjectID, int? ChildObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipAll_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipAll_Select] @ParentObjectID, @ChildObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipAll_Valid_SelectResult>> Proc_AR_RelationshipAll_Valid_SelectAsync(int? ParentObjectID, int? ChildObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentObjectID",
                    Value = ParentObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChildObjectID",
                    Value = ChildObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipAll_Valid_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipAll_Valid_Select] @ParentObjectID, @ChildObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipType_DeleteResult>> Proc_AR_RelationshipType_DeleteAsync(int? Old_RelationshipTypeID, int? New_RelationshipTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Old_RelationshipTypeID",
                    Value = Old_RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "New_RelationshipTypeID",
                    Value = New_RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipType_DeleteResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipType_Delete] @Old_RelationshipTypeID, @New_RelationshipTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipType_InsertResult>> Proc_AR_RelationshipType_InsertAsync(string RelationshipTypeName, string RelationshipTypeAlias, string RelationshipTypeNamespace, string RelationshipTypeDescription, bool? Inherit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeName",
                    Size = 510,
                    Value = RelationshipTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeAlias",
                    Size = 510,
                    Value = RelationshipTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeNamespace",
                    Size = 510,
                    Value = RelationshipTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeDescription",
                    Size = 510,
                    Value = RelationshipTypeDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Inherit",
                    Value = Inherit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipType_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipType_Insert] @RelationshipTypeName, @RelationshipTypeAlias, @RelationshipTypeNamespace, @RelationshipTypeDescription, @Inherit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipType_SelectResult>> Proc_AR_RelationshipType_SelectAsync(int? RelationshipTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipType_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipType_Select] @RelationshipTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_RelationshipType_UpdateResult>> Proc_AR_RelationshipType_UpdateAsync(int? RelationshipTypeID, string RelationshipTypeName, string RelationshipTypeAlias, string RelationshipTypeNamespace, string RelationshipTypeDescription, bool? Inherit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeID",
                    Value = RelationshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeName",
                    Size = 510,
                    Value = RelationshipTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeAlias",
                    Size = 510,
                    Value = RelationshipTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeNamespace",
                    Size = 510,
                    Value = RelationshipTypeNamespace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeDescription",
                    Size = 510,
                    Value = RelationshipTypeDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Inherit",
                    Value = Inherit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_RelationshipType_UpdateResult>("EXEC @returnValue = [dbo].[Proc_AR_RelationshipType_Update] @RelationshipTypeID, @RelationshipTypeName, @RelationshipTypeAlias, @RelationshipTypeNamespace, @RelationshipTypeDescription, @Inherit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_Delete_UnVerifiedResult>> Proc_AR_User_Delete_UnVerifiedAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_Delete_UnVerifiedResult>("EXEC @returnValue = [dbo].[Proc_AR_User_Delete_UnVerified]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_InsertResult>> Proc_AR_User_InsertAsync(string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, string Loginname, string Password, string PasswordEncryption, DateTime? PasswordExpires, string EmailAddress, string Title, string FirstName, string MiddleName, string LastName, string Office, string PhoneOffice, string PhoneHome, string PhonePager, string PhoneMobile, string Fax, string WebPage, string Address1, string Address2, string Address3, string City, string State, string Zip, string Country, string ShippingAddress1, string ShippingAddress2, string ShippingAddress3, string ShippingCity, string ShippingState, string ShippingZip, string ShippingCountry, string OrgPosition, string OrgDepartment, string OrgCompanyName, string OrgNotes, string Notes, int? CustomField1, double? CustomField2, string CustomField3, string CustomField4, string CustomField5, string CustomField6, DateTime? CustomField7, DateTime? CustomField8, bool? CustomField9, bool? CustomField10, string CustomField11, string CustomField12, string PhotoName, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Loginname",
                    Size = 510,
                    Value = Loginname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 510,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordEncryption",
                    Size = 20,
                    Value = PasswordEncryption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordExpires",
                    Value = PasswordExpires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 510,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 100,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 100,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = 100,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 100,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Office",
                    Size = 200,
                    Value = Office ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneOffice",
                    Size = 100,
                    Value = PhoneOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneHome",
                    Size = 100,
                    Value = PhoneHome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhonePager",
                    Size = 100,
                    Value = PhonePager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneMobile",
                    Size = 100,
                    Value = PhoneMobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fax",
                    Size = 100,
                    Value = Fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WebPage",
                    Size = 200,
                    Value = WebPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address1",
                    Size = 200,
                    Value = Address1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address2",
                    Size = 200,
                    Value = Address2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address3",
                    Size = 200,
                    Value = Address3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 200,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 200,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 100,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 200,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress1",
                    Size = 200,
                    Value = ShippingAddress1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress2",
                    Size = 200,
                    Value = ShippingAddress2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress3",
                    Size = 200,
                    Value = ShippingAddress3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingCity",
                    Size = 200,
                    Value = ShippingCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingState",
                    Size = 200,
                    Value = ShippingState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingZip",
                    Size = 100,
                    Value = ShippingZip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingCountry",
                    Size = 200,
                    Value = ShippingCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgPosition",
                    Size = 300,
                    Value = OrgPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgDepartment",
                    Size = 300,
                    Value = OrgDepartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgCompanyName",
                    Size = 300,
                    Value = OrgCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgNotes",
                    Value = OrgNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "Notes",
                    Value = Notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField1",
                    Value = CustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField2",
                    Value = CustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField3",
                    Size = 20,
                    Value = CustomField3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField4",
                    Size = 100,
                    Value = CustomField4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField5",
                    Size = 200,
                    Value = CustomField5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField6",
                    Size = 200,
                    Value = CustomField6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField7",
                    Value = CustomField7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField8",
                    Value = CustomField8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField9",
                    Value = CustomField9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField10",
                    Value = CustomField10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField11",
                    Value = CustomField11 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField12",
                    Value = CustomField12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoName",
                    Size = 100,
                    Value = PhotoName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_InsertResult>("EXEC @returnValue = [dbo].[Proc_AR_User_Insert] @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @Loginname, @Password, @PasswordEncryption, @PasswordExpires, @EmailAddress, @Title, @FirstName, @MiddleName, @LastName, @Office, @PhoneOffice, @PhoneHome, @PhonePager, @PhoneMobile, @Fax, @WebPage, @Address1, @Address2, @Address3, @City, @State, @Zip, @Country, @ShippingAddress1, @ShippingAddress2, @ShippingAddress3, @ShippingCity, @ShippingState, @ShippingZip, @ShippingCountry, @OrgPosition, @OrgDepartment, @OrgCompanyName, @OrgNotes, @Notes, @CustomField1, @CustomField2, @CustomField3, @CustomField4, @CustomField5, @CustomField6, @CustomField7, @CustomField8, @CustomField9, @CustomField10, @CustomField11, @CustomField12, @PhotoName, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_InsertShortResult>> Proc_AR_User_InsertShortAsync(string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, string Loginname, string Password, string PasswordEncryption, DateTime? PasswordExpires, string EmailAddress, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Loginname",
                    Size = 510,
                    Value = Loginname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 510,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordEncryption",
                    Size = 20,
                    Value = PasswordEncryption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordExpires",
                    Value = PasswordExpires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 510,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_InsertShortResult>("EXEC @returnValue = [dbo].[Proc_AR_User_InsertShort] @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @Loginname, @Password, @PasswordEncryption, @PasswordExpires, @EmailAddress, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_IsAuthorizedResult>> Proc_AR_User_IsAuthorizedAsync(string LoginName, string ResourceAlias, string RelationshipTypeAlias, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LoginName",
                    Size = 510,
                    Value = LoginName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResourceAlias",
                    Size = 510,
                    Value = ResourceAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RelationshipTypeAlias",
                    Size = 510,
                    Value = RelationshipTypeAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_IsAuthorizedResult>("EXEC @returnValue = [dbo].[Proc_AR_User_IsAuthorized] @LoginName, @ResourceAlias, @RelationshipTypeAlias", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_ListResult>> Proc_AR_User_ListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_ListResult>("EXEC @returnValue = [dbo].[Proc_AR_User_List]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_SelectResult>> Proc_AR_User_SelectAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_SelectResult>("EXEC @returnValue = [dbo].[Proc_AR_User_Select] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_Select_UnVerifiedResult>> Proc_AR_User_Select_UnVerifiedAsync(string PropertyValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PropertyValue",
                    Size = 510,
                    Value = PropertyValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_Select_UnVerifiedResult>("EXEC @returnValue = [dbo].[Proc_AR_User_Select_UnVerified] @PropertyValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_SelectByEmailAddressResult>> Proc_AR_User_SelectByEmailAddressAsync(string EmailAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 510,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_SelectByEmailAddressResult>("EXEC @returnValue = [dbo].[Proc_AR_User_SelectByEmailAddress] @EmailAddress", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_User_SelectByLoginNameResult>> Proc_AR_User_SelectByLoginNameAsync(string Loginname, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Loginname",
                    Size = 510,
                    Value = Loginname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_User_SelectByLoginNameResult>("EXEC @returnValue = [dbo].[Proc_AR_User_SelectByLoginName] @Loginname", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_User_UpdateAsync(int? ObjectID, string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, string Loginname, string Password, string PasswordEncryption, DateTime? PasswordExpires, string EmailAddress, string Title, string FirstName, string MiddleName, string LastName, string Office, string PhoneOffice, string PhoneHome, string PhonePager, string PhoneMobile, string Fax, string WebPage, string Address1, string Address2, string Address3, string City, string State, string Zip, string Country, string ShippingAddress1, string ShippingAddress2, string ShippingAddress3, string ShippingCity, string ShippingState, string ShippingZip, string ShippingCountry, string OrgPosition, string OrgDepartment, string OrgCompanyName, string OrgNotes, string Notes, int? CustomField1, double? CustomField2, string CustomField3, string CustomField4, string CustomField5, string CustomField6, DateTime? CustomField7, DateTime? CustomField8, bool? CustomField9, bool? CustomField10, string CustomField11, string CustomField12, string PhotoName, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Loginname",
                    Size = 510,
                    Value = Loginname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 510,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordEncryption",
                    Size = 20,
                    Value = PasswordEncryption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordExpires",
                    Value = PasswordExpires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 510,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 100,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 100,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = 100,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 100,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Office",
                    Size = 200,
                    Value = Office ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneOffice",
                    Size = 100,
                    Value = PhoneOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneHome",
                    Size = 100,
                    Value = PhoneHome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhonePager",
                    Size = 100,
                    Value = PhonePager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneMobile",
                    Size = 100,
                    Value = PhoneMobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fax",
                    Size = 100,
                    Value = Fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WebPage",
                    Size = 200,
                    Value = WebPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address1",
                    Size = 200,
                    Value = Address1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address2",
                    Size = 200,
                    Value = Address2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address3",
                    Size = 200,
                    Value = Address3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 200,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 200,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 100,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 200,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress1",
                    Size = 200,
                    Value = ShippingAddress1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress2",
                    Size = 200,
                    Value = ShippingAddress2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingAddress3",
                    Size = 200,
                    Value = ShippingAddress3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingCity",
                    Size = 200,
                    Value = ShippingCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingState",
                    Size = 200,
                    Value = ShippingState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingZip",
                    Size = 100,
                    Value = ShippingZip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShippingCountry",
                    Size = 200,
                    Value = ShippingCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgPosition",
                    Size = 300,
                    Value = OrgPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgDepartment",
                    Size = 300,
                    Value = OrgDepartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgCompanyName",
                    Size = 300,
                    Value = OrgCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgNotes",
                    Value = OrgNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "Notes",
                    Value = Notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField1",
                    Value = CustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField2",
                    Value = CustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField3",
                    Size = 20,
                    Value = CustomField3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField4",
                    Size = 100,
                    Value = CustomField4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField5",
                    Size = 200,
                    Value = CustomField5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField6",
                    Size = 200,
                    Value = CustomField6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField7",
                    Value = CustomField7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField8",
                    Value = CustomField8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField9",
                    Value = CustomField9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField10",
                    Value = CustomField10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField11",
                    Value = CustomField11 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "CustomField12",
                    Value = CustomField12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoName",
                    Size = 100,
                    Value = PhotoName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_User_Update] @ObjectID, @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @Loginname, @Password, @PasswordEncryption, @PasswordExpires, @EmailAddress, @Title, @FirstName, @MiddleName, @LastName, @Office, @PhoneOffice, @PhoneHome, @PhonePager, @PhoneMobile, @Fax, @WebPage, @Address1, @Address2, @Address3, @City, @State, @Zip, @Country, @ShippingAddress1, @ShippingAddress2, @ShippingAddress3, @ShippingCity, @ShippingState, @ShippingZip, @ShippingCountry, @OrgPosition, @OrgDepartment, @OrgCompanyName, @OrgNotes, @Notes, @CustomField1, @CustomField2, @CustomField3, @CustomField4, @CustomField5, @CustomField6, @CustomField7, @CustomField8, @CustomField9, @CustomField10, @CustomField11, @CustomField12, @PhotoName, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_AR_User_UpdateShortAsync(int? ObjectID, string ObjectName, string ObjectAlias, int? ObjectTypeID, DateTime? ObjectValidFrom, DateTime? ObjectValidTo, string ObjectDescription, string ObjectCustomField1, string Loginname, string Password, string PasswordEncryption, DateTime? PasswordExpires, string EmailAddress, Guid? ObjectCustomField2, int? OwnerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 510,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectAlias",
                    Size = 510,
                    Value = ObjectAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeID",
                    Value = ObjectTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidFrom",
                    Value = ObjectValidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValidTo",
                    Value = ObjectValidTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectDescription",
                    Size = 510,
                    Value = ObjectDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField1",
                    Size = 510,
                    Value = ObjectCustomField1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Loginname",
                    Size = 510,
                    Value = Loginname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 510,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordEncryption",
                    Size = 20,
                    Value = PasswordEncryption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordExpires",
                    Value = PasswordExpires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 510,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectCustomField2",
                    Value = ObjectCustomField2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerID",
                    Value = OwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_AR_User_UpdateShort] @ObjectID, @ObjectName, @ObjectAlias, @ObjectTypeID, @ObjectValidFrom, @ObjectValidTo, @ObjectDescription, @ObjectCustomField1, @Loginname, @Password, @PasswordEncryption, @PasswordExpires, @EmailAddress, @ObjectCustomField2, @OwnerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_AR_UserGroup_ListResult>> Proc_AR_UserGroup_ListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_AR_UserGroup_ListResult>("EXEC @returnValue = [dbo].[Proc_AR_UserGroup_List]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_GetUserNameResult>> Proc_GetUserNameAsync(int? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_GetUserNameResult>("EXEC @returnValue = [dbo].[Proc_GetUserName] @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
